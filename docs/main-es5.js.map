{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","matSnackbar","readonly","active","dirty","myGraph","edges","nodes","data","unit","textProperty","label","x","y","slots","type","availableNodes","someProperty","properties","path","description","open","undefined","duration","context","graphContext","console","log","dir","graph","onGraphChanged","onContextChanged","onSaveRequested","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\nimport { DiazoGraph, DiazoNodeSet, DiazoContext } from 'diazo';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  constructor(\n    private matSnackbar : MatSnackBar\n  ) {\n\n  }\n  readonly = false;\n  active = false;\n  graphContext : DiazoContext;\n  dirty = false;\n\n  onSaveRequested() {\n    if (this.dirty) {\n      this.dirty = false;\n      this.matSnackbar.open(\n        \"Pretending to save your changes!\", \n        undefined, {\n          duration: 1000\n        }\n      );\n    } else {\n      this.matSnackbar.open(\n        \"No changes need to be saved!\", \n        undefined, \n        {\n          duration: 1000\n        }\n      );\n    }\n  }\n\n  onContextChanged(context : DiazoContext) {\n    this.graphContext = context;\n\n    console.log(`Received graph context from <dz-editor>:`);\n    console.dir(context);\n  }\n\n  onGraphChanged(graph : DiazoGraph) {\n    this.dirty = true;\n    this.matSnackbar.open('You have changed the graph!', undefined, {\n      duration: 1000\n    });\n  }\n\n  myGraph : DiazoGraph = {\n    edges: [], \n    nodes: [\n      {\n        id: 'one',\n        data: { \n          unit: 'my-input',\n          textProperty: 'hello'\n        },\n        label: 'My Input',\n        x: 50, \n        y: 50,\n        slots: [\n          { id: 'output', type: 'output', label: 'Output' }\n        ]\n      },\n      {\n        id: 'two',\n        data: { unit: 'my-output' },\n        label: 'My Output',\n        x: 300, \n        y: 100,\n        slots: [\n          { id: 'input', type: 'input', label: 'Input' }\n        ]\n      }\n    ]\n  };\n  \n  availableNodes : DiazoNodeSet[] = [\n    {\n        id: 'general',\n        label: 'General',\n        nodes: [\n            {\n                data: {\n                    unit: 'my-input',\n                    someProperty: 'abc'\n                },\n                label: 'My Input',\n                slots: [\n                    { id: 'output', type: 'output', label: 'Output' }\n                ],\n                properties: [\n                    {\n                        id: 'output-options',\n                        label: 'Output Options',\n                        properties: [\n                            {\n                                type: 'text',\n                                path: '$.data.textProperty',\n                                label: 'A Text Property',\n                                description: 'This is an example of a text property!'\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                data: {\n                    unit: 'my-output'\n                },\n                label: 'My Output',\n                slots: [\n                    { id: 'input', type: 'input', label: 'Input' }\n                ]\n            }\n        ]\n    }\n]\n}\n","\n<h1>Diazo Example</h1>\n\n<mat-checkbox [(ngModel)]=\"readonly\">Readonly</mat-checkbox>\n&nbsp;\n<mat-checkbox [(ngModel)]=\"active\">Active</mat-checkbox>\n\n<dz-editor \n    [graph]=\"myGraph\"\n    [readonly]=\"readonly\"\n    [active]=\"active\"\n    (graphChanged)=\"onGraphChanged($event)\"\n    (contextChanged)=\"onContextChanged($event)\"\n    (saveRequested)=\"onSaveRequested()\"\n    [availableNodes]=\"availableNodes\"></dz-editor>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { DiazoModule } from 'diazo';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\nimport { AppComponent } from './app.component';\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    DiazoModule,\n    MatCheckboxModule,\n    MatSnackBarModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}